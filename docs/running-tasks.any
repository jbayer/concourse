#language anatomy

\use{anatomy/atomy}

\title{Tasks}{running-tasks}

The smallest configurable unit in a Concourse pipeline is a single task.

Once you have a running Concourse deployment, you can start configuring your
tasks and executing them interactively from your terminal with the
\reference{fly-cli}{Fly} commandline tool.

Once you've figured out your tasks's configuration, you can reuse it for a
\reference{jobs}{Job} in your \reference{pipelines}{Pipeline}.


\section{Configuring a Task}{configuring-tasks}{
  Conventionally a task's configuration is placed in the root of a repo as
  \code{task.yml}. It may look something like:

  \codeblock{yaml}{
  ---
  platform: linux

  image: docker:///ubuntu#14.04

  inputs:
  - name: my-repo

  run:
    path: my-repo/scripts/test
  }

  This configuration specifies that the task must run with the
  \code{ubuntu:14.04} Docker image with a \code{my-repo} input, and when the
  task is executed it will run the script \code{my-repo/scripts/test}.

  A task's configuration specifies the following:

  \define{platform}{string}{
    \italic{Required.} The platform the task should run on. By convention,
    \code{windows}, \code{linux}, or \code{darwin} are specified. This determines
    the pool of workers that the task can run against. The base deployment
    provides Linux workers.
  }

  \define{tags}{string}{
    \italic{Optional.} A set of arbitrary tags to determine which workers the task
    should run on. Tags can be omitted from task configuration files and
    overridden by jobs, so that the task config can be reused and run in separate
    environments.
  }

  \define{image}{string}{
    \italic{Optional.} The base image of the container. For a Docker image, specify
    in the format \code{docker:///username/repo#tag} (rather than
    \code{username/repo:tag}). If you for whatever reason have an extracted
    rootfs lying around, you can also specify the absolute path to it on the
    worker VM.
  }

  \define{inputs}{[object]}{
    \italic{Required.} The expected set of inputs for the task.

    This determines which artifacts will propagate into the task, as the
    \reference{build-plans}{build plan} executes. If any specified inputs
    are not present, the task will end with an error, without running.

    Each input has the following attributes:

    \inset{
      \define{name}{string}{
        \italic{Required.} The logical name of the input.
      }

      \define{path}{string}{
        \italic{Optional.} The path in the where the input will be placed. If not
        specified, the input's \code{name} is used.
      }
    }
  }

  \define{run}{object}{
    \italic{Required.} The command to execute in the container.

    \inset{
      \define{path}{string}{
        \italic{Required.} The command to execute, relative to the task's
        working directory. For a script living in a resource's repo, you must
        specify the full path to the resource, i.e.
        \code{my-resource/scripts/test}.
      }

      \define{args}{[string]}{
        \italic{Optional.} Arguments to pass to the command. Note that when
        executed with Fly, any arguments passed to Fly are appended to this
        array.
      }
    }

    Note that this is \italic{not} provided as a script blob, but explicit
    \code{path} and \code{args} values; this allows \code{fly} to forward
    arguments to the script, and forces your config \code{.yml} to stay fairly
    small.
  }

  \define{params}{\{string: string\}}{
    \italic{Optional.} A key-value mapping of values that are exposed to the
    task via environment variables.

    Use this to provide things like credentials, not to set up the task's
    Bash environment (they do not support interpolation).
  }
}

\section{Running tasks with \code{fly}}{fly}{
  \reference{fly-cli}{Fly} is a command-line tool that can be used to execute
  a task configuration against a Concourse deployment. This provides a fast
  feedback loop for iterating on the task configuration and your code.

  For more information, see \reference{fly-execute}.
}
